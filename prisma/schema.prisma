generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// enum VoteType {
//   UP
//   DOWN
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  // createdCommunities Community[]    @relation("CreatedBy")
  // subscriptions      Subscription[]
  likes         Like[]

  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]
  Post     Post[]
  password String?

  // Define a field for the followers of this user
  followers Follow[] @relation("Following")

  // Define a field for the users this user is following
  following Follow[] @relation("Follower")

  // Comment     Comment[]
  // CommentVote CommentVote[]
}

model Follow {
  id String @id @default(cuid())

  followerId  String
  followingId String

  // Define a foreign key relationship to the User model
  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  // Add a unique constraint to ensure each follow relationship is unique
  @@unique([followerId, followingId])
  @@index([followingId])
}

// model Community {
//   id        String   @id @default(cuid())
//   name      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   posts     Post[]

//   creatorId   String?
//   Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
//   subscribers Subscription[]

//   @@index([name])
//   @@index([creatorId])
// }

// model Subscription {
//   user        User      @relation(fields: [userId], references: [id])
//   userId      String
//   community   Community @relation(fields: [communityId], references: [id])
//   communityId String

//   @@id([userId, communityId])
//   @@index([userId])
//   @@index([communityId])
// }

model Post {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  // community   Community @relation(fields: [communityId], references: [id])
  // communityId String?
  // comments    Comment[]
  likes     Like[]
  // @@index([communityId])

  @@index([authorId])
}

// model Comment {
//   id        String   @id @default(cuid())
//   text      String
//   createdAt DateTime @default(now())
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  String
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId    String

//   replyToId String?
//   replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   replies   Comment[] @relation("ReplyTo")

//   votes     CommentVote[]
//   commentId String?

//   @@index([authorId])
//   @@index([postId])
//   @@index([replyToId])
// }

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}
